
//----------------------------------------
// The code is automatically generated by the GenlibLcl tool.
// Copyright Â© ying32. All Rights Reserved.
// 
// Licensed under Apache License 2.0
//
//----------------------------------------

function Frame_Create(AOwner: TComponent): TFrame; extdecl;
begin
  handleExceptionBegin
  Result :=  TFrame.Create(AOwner);
  handleExceptionEnd
end;

procedure Frame_Free(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Free;
  handleExceptionEnd
end;

procedure Frame_ScrollInView(AObj: TFrame; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollInView(AControl);
  handleExceptionEnd
end;

function Frame_CanFocus(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.CanFocus;
  handleExceptionEnd
end;

function Frame_ContainsControl(AObj: TFrame; Control: TControl): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ContainsControl(Control);
  handleExceptionEnd
end;

function Frame_ControlAtPos(AObj: TFrame; var Pos: TPoint; AllowDisabled: LongBool; AllowWinControls: LongBool): TControl; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ControlAtPos(Pos, AllowDisabled, AllowWinControls);
  handleExceptionEnd
end;

procedure Frame_DisableAlign(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.DisableAlign;
  handleExceptionEnd
end;

procedure Frame_EnableAlign(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.EnableAlign;
  handleExceptionEnd
end;

function Frame_FindChildControl(AObj: TFrame; ControlName: PChar): TControl; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.FindChildControl(ControlName);
  handleExceptionEnd
end;

procedure Frame_FlipChildren(AObj: TFrame; AllLevels: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.FlipChildren(AllLevels);
  handleExceptionEnd
end;

function Frame_Focused(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Focused;
  handleExceptionEnd
end;

function Frame_HandleAllocated(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.HandleAllocated;
  handleExceptionEnd
end;

procedure Frame_InsertControl(AObj: TFrame; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.InsertControl(AControl);
  handleExceptionEnd
end;

procedure Frame_Invalidate(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Invalidate;
  handleExceptionEnd
end;

procedure Frame_RemoveControl(AObj: TFrame; AControl: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.RemoveControl(AControl);
  handleExceptionEnd
end;

procedure Frame_Realign(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Realign;
  handleExceptionEnd
end;

procedure Frame_Repaint(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Repaint;
  handleExceptionEnd
end;

procedure Frame_ScaleBy(AObj: TFrame; M: Integer; D: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScaleBy(M, D);
  handleExceptionEnd
end;

procedure Frame_ScrollBy(AObj: TFrame; DeltaX: Integer; DeltaY: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ScrollBy(DeltaX, DeltaY);
  handleExceptionEnd
end;

procedure Frame_SetBounds(AObj: TFrame; ALeft: Integer; ATop: Integer; AWidth: Integer; AHeight: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.SetBounds(ALeft, ATop, AWidth, AHeight);
  handleExceptionEnd
end;

procedure Frame_SetFocus(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.SetFocus;
  handleExceptionEnd
end;

procedure Frame_Update(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Update;
  handleExceptionEnd
end;

procedure Frame_BringToFront(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.BringToFront;
  handleExceptionEnd
end;

procedure Frame_ClientToScreen(AObj: TFrame; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToScreen(Point);
  handleExceptionEnd
end;

procedure Frame_ClientToParent(AObj: TFrame; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientToParent(Point, AParent);
  handleExceptionEnd
end;

function Frame_Dragging(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Dragging;
  handleExceptionEnd
end;

function Frame_HasParent(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.HasParent;
  handleExceptionEnd
end;

procedure Frame_Hide(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Hide;
  handleExceptionEnd
end;

function Frame_Perform(AObj: TFrame; Msg: Cardinal; WParam: NativeUInt; LParam: NativeInt): NativeInt; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Perform(Msg, WParam, LParam);
  handleExceptionEnd
end;

procedure Frame_Refresh(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Refresh;
  handleExceptionEnd
end;

procedure Frame_ScreenToClient(AObj: TFrame; var Point: TPoint; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ScreenToClient(Point);
  handleExceptionEnd
end;

procedure Frame_ParentToClient(AObj: TFrame; var Point: TPoint; AParent: TWinControl; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentToClient(Point, AParent);
  handleExceptionEnd
end;

procedure Frame_SendToBack(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.SendToBack;
  handleExceptionEnd
end;

procedure Frame_Show(AObj: TFrame); extdecl;
begin
  handleExceptionBegin
  AObj.Show;
  handleExceptionEnd
end;

function Frame_GetTextBuf(AObj: TFrame; Buffer: PChar; BufSize: Integer): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.GetTextBuf(Buffer, BufSize);
  handleExceptionEnd
end;

function Frame_GetTextLen(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  {$ifdef darwin}Length(AObj.Caption){$else}AObj.GetTextLen{$endif};
  handleExceptionEnd
end;

procedure Frame_SetTextBuf(AObj: TFrame; Buffer: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.SetTextBuf(Buffer);
  handleExceptionEnd
end;

function Frame_FindComponent(AObj: TFrame; AName: PChar): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.FindComponent(AName);
  handleExceptionEnd
end;

function Frame_GetNamePath(AObj: TFrame): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.GetNamePath);
  handleExceptionEnd
end;

procedure Frame_Assign(AObj: TFrame; Source: TPersistent); extdecl;
begin
  handleExceptionBegin
  AObj.Assign(Source);
  handleExceptionEnd
end;

function Frame_ClassType(AObj: TFrame): TClass; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClassType;
  handleExceptionEnd
end;

function Frame_ClassName(AObj: TFrame): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  ToPChar(AObj.ClassName);
  handleExceptionEnd
end;

function Frame_InstanceSize(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InstanceSize;
  handleExceptionEnd
end;

function Frame_InheritsFrom(AObj: TFrame; AClass: TClass): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.InheritsFrom(AClass);
  handleExceptionEnd
end;

function Frame_Equals(AObj: TFrame; Obj: TObject): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Equals(Obj);
  handleExceptionEnd
end;

function Frame_GetHashCode(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.GetHashCode;
  handleExceptionEnd
end;

function Frame_ToString(AObj: TFrame): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.ToString);
  handleExceptionEnd
end;

procedure Frame_AnchorToNeighbour(AObj: TFrame; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorToNeighbour(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

procedure Frame_AnchorParallel(AObj: TFrame; ASide: TAnchorKind; ASpace: Integer; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorParallel(ASide, ASpace, ASibling);
  handleExceptionEnd
end;

procedure Frame_AnchorHorizontalCenterTo(AObj: TFrame; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorHorizontalCenterTo(ASibling);
  handleExceptionEnd
end;

procedure Frame_AnchorVerticalCenterTo(AObj: TFrame; ASibling: TControl); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorVerticalCenterTo(ASibling);
  handleExceptionEnd
end;

procedure Frame_AnchorAsAlign(AObj: TFrame; ATheAlign: TAlign; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorAsAlign(ATheAlign, ASpace);
  handleExceptionEnd
end;

procedure Frame_AnchorClient(AObj: TFrame; ASpace: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorClient(ASpace);
  handleExceptionEnd
end;

function Frame_GetAlign(AObj: TFrame): TAlign; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Align;
  handleExceptionEnd
end;

procedure Frame_SetAlign(AObj: TFrame; AValue: TAlign); extdecl;
begin
  handleExceptionBegin
  AObj.Align := AValue;
  handleExceptionEnd
end;

function Frame_GetAnchors(AObj: TFrame): TAnchors; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Anchors;
  handleExceptionEnd
end;

procedure Frame_SetAnchors(AObj: TFrame; AValue: TAnchors); extdecl;
begin
  handleExceptionBegin
  AObj.Anchors := AValue;
  handleExceptionEnd
end;

function Frame_GetAutoScroll(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AutoScroll;
  handleExceptionEnd
end;

procedure Frame_SetAutoScroll(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoScroll := AValue;
  handleExceptionEnd
end;

function Frame_GetAutoSize(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AutoSize;
  handleExceptionEnd
end;

procedure Frame_SetAutoSize(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.AutoSize := AValue;
  handleExceptionEnd
end;

function Frame_GetBiDiMode(AObj: TFrame): TBiDiMode; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BiDiMode;
  handleExceptionEnd
end;

procedure Frame_SetBiDiMode(AObj: TFrame; AValue: TBiDiMode); extdecl;
begin
  handleExceptionBegin
  AObj.BiDiMode := AValue;
  handleExceptionEnd
end;

function Frame_GetConstraints(AObj: TFrame): TSizeConstraints; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Constraints;
  handleExceptionEnd
end;

procedure Frame_SetConstraints(AObj: TFrame; AValue: TSizeConstraints); extdecl;
begin
  handleExceptionBegin
  AObj.Constraints := AValue;
  handleExceptionEnd
end;

function Frame_GetDockSite(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DockSite;
  handleExceptionEnd
end;

procedure Frame_SetDockSite(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DockSite := AValue;
  handleExceptionEnd
end;

function Frame_GetDoubleBuffered(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DoubleBuffered;
  handleExceptionEnd
end;

procedure Frame_SetDoubleBuffered(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.DoubleBuffered := AValue;
  handleExceptionEnd
end;

function Frame_GetDragCursor(AObj: TFrame): TCursor; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DragCursor;
  handleExceptionEnd
end;

procedure Frame_SetDragCursor(AObj: TFrame; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.DragCursor := AValue;
  handleExceptionEnd
end;

function Frame_GetDragKind(AObj: TFrame): TDragKind; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DragKind;
  handleExceptionEnd
end;

procedure Frame_SetDragKind(AObj: TFrame; AValue: TDragKind); extdecl;
begin
  handleExceptionBegin
  AObj.DragKind := AValue;
  handleExceptionEnd
end;

function Frame_GetDragMode(AObj: TFrame): TDragMode; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DragMode;
  handleExceptionEnd
end;

procedure Frame_SetDragMode(AObj: TFrame; AValue: TDragMode); extdecl;
begin
  handleExceptionBegin
  AObj.DragMode := AValue;
  handleExceptionEnd
end;

function Frame_GetEnabled(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Enabled;
  handleExceptionEnd
end;

procedure Frame_SetEnabled(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Enabled := AValue;
  handleExceptionEnd
end;

function Frame_GetColor(AObj: TFrame): TColor; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Color;
  handleExceptionEnd
end;

procedure Frame_SetColor(AObj: TFrame; AValue: TColor); extdecl;
begin
  handleExceptionBegin
  AObj.Color := AValue;
  handleExceptionEnd
end;

function Frame_GetFont(AObj: TFrame): TFont; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Font;
  handleExceptionEnd
end;

procedure Frame_SetFont(AObj: TFrame; AValue: TFont); extdecl;
begin
  handleExceptionBegin
  AObj.Font := AValue;
  handleExceptionEnd
end;

function Frame_GetParentColor(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentColor;
  handleExceptionEnd
end;

procedure Frame_SetParentColor(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentColor := AValue;
  handleExceptionEnd
end;

function Frame_GetParentDoubleBuffered(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentDoubleBuffered;
  handleExceptionEnd
end;

procedure Frame_SetParentDoubleBuffered(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentDoubleBuffered := AValue;
  handleExceptionEnd
end;

function Frame_GetParentFont(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentFont;
  handleExceptionEnd
end;

procedure Frame_SetParentFont(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentFont := AValue;
  handleExceptionEnd
end;

function Frame_GetParentShowHint(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentShowHint;
  handleExceptionEnd
end;

procedure Frame_SetParentShowHint(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ParentShowHint := AValue;
  handleExceptionEnd
end;

function Frame_GetPopupMenu(AObj: TFrame): TPopupMenu; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.PopupMenu;
  handleExceptionEnd
end;

procedure Frame_SetPopupMenu(AObj: TFrame; AValue: TPopupMenu); extdecl;
begin
  handleExceptionBegin
  AObj.PopupMenu := AValue;
  handleExceptionEnd
end;

function Frame_GetShowHint(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ShowHint;
  handleExceptionEnd
end;

procedure Frame_SetShowHint(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.ShowHint := AValue;
  handleExceptionEnd
end;

function Frame_GetTabOrder(AObj: TFrame): TTabOrder; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.TabOrder;
  handleExceptionEnd
end;

procedure Frame_SetTabOrder(AObj: TFrame; AValue: TTabOrder); extdecl;
begin
  handleExceptionBegin
  AObj.TabOrder := AValue;
  handleExceptionEnd
end;

function Frame_GetTabStop(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.TabStop;
  handleExceptionEnd
end;

procedure Frame_SetTabStop(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.TabStop := AValue;
  handleExceptionEnd
end;

function Frame_GetVisible(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Visible;
  handleExceptionEnd
end;

procedure Frame_SetVisible(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.Visible := AValue;
  handleExceptionEnd
end;

//EVENT_TYPE:TAlignPositionEvent
procedure Frame_SetOnAlignPosition(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTAlignPositionEvent_OnAlignPosition}
  {$DEFINE EventName := OnAlignPosition}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnClick(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnClick}
  {$DEFINE EventName := OnClick}
  EventMethodCode
end;

//EVENT_TYPE:TContextPopupEvent
procedure Frame_SetOnContextPopup(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTContextPopupEvent_OnContextPopup}
  {$DEFINE EventName := OnContextPopup}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnDblClick(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnDblClick}
  {$DEFINE EventName := OnDblClick}
  EventMethodCode
end;

//EVENT_TYPE:TDockDropEvent
procedure Frame_SetOnDockDrop(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTDockDropEvent_OnDockDrop}
  {$DEFINE EventName := OnDockDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragDropEvent
procedure Frame_SetOnDragDrop(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragDropEvent_OnDragDrop}
  {$DEFINE EventName := OnDragDrop}
  EventMethodCode
end;

//EVENT_TYPE:TDragOverEvent
procedure Frame_SetOnDragOver(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTDragOverEvent_OnDragOver}
  {$DEFINE EventName := OnDragOver}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure Frame_SetOnEndDock(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent_OnEndDock}
  {$DEFINE EventName := OnEndDock}
  EventMethodCode
end;

//EVENT_TYPE:TEndDragEvent
procedure Frame_SetOnEndDrag(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTEndDragEvent_OnEndDrag}
  {$DEFINE EventName := OnEndDrag}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnEnter(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnEnter}
  {$DEFINE EventName := OnEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnExit(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnExit}
  {$DEFINE EventName := OnExit}
  EventMethodCode
end;

//EVENT_TYPE:TGetSiteInfoEvent
procedure Frame_SetOnGetSiteInfo(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTGetSiteInfoEvent_OnGetSiteInfo}
  {$DEFINE EventName := OnGetSiteInfo}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Frame_SetOnMouseDown(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent_OnMouseDown}
  {$DEFINE EventName := OnMouseDown}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnMouseEnter(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnMouseEnter}
  {$DEFINE EventName := OnMouseEnter}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnMouseLeave(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnMouseLeave}
  {$DEFINE EventName := OnMouseLeave}
  EventMethodCode
end;

//EVENT_TYPE:TMouseMoveEvent
procedure Frame_SetOnMouseMove(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseMoveEvent_OnMouseMove}
  {$DEFINE EventName := OnMouseMove}
  EventMethodCode
end;

//EVENT_TYPE:TMouseEvent
procedure Frame_SetOnMouseUp(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseEvent_OnMouseUp}
  {$DEFINE EventName := OnMouseUp}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelEvent
procedure Frame_SetOnMouseWheel(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelEvent_OnMouseWheel}
  {$DEFINE EventName := OnMouseWheel}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure Frame_SetOnMouseWheelDown(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent_OnMouseWheelDown}
  {$DEFINE EventName := OnMouseWheelDown}
  EventMethodCode
end;

//EVENT_TYPE:TMouseWheelUpDownEvent
procedure Frame_SetOnMouseWheelUp(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTMouseWheelUpDownEvent_OnMouseWheelUp}
  {$DEFINE EventName := OnMouseWheelUp}
  EventMethodCode
end;

//EVENT_TYPE:TNotifyEvent
procedure Frame_SetOnResize(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTNotifyEvent_OnResize}
  {$DEFINE EventName := OnResize}
  EventMethodCode
end;

//EVENT_TYPE:TStartDockEvent
procedure Frame_SetOnStartDock(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTStartDockEvent_OnStartDock}
  {$DEFINE EventName := OnStartDock}
  EventMethodCode
end;

//EVENT_TYPE:TUnDockEvent
procedure Frame_SetOnUnDock(AObj: TFrame; AEventId: NativeUInt); extdecl;
begin
  {$DEFINE EventMethodName := OnTUnDockEvent_OnUnDock}
  {$DEFINE EventName := OnUnDock}
  EventMethodCode
end;

function Frame_GetHorzScrollBar(AObj: TFrame): TControlScrollBar; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.HorzScrollBar;
  handleExceptionEnd
end;

procedure Frame_SetHorzScrollBar(AObj: TFrame; AValue: TControlScrollBar); extdecl;
begin
  handleExceptionBegin
  AObj.HorzScrollBar := AValue;
  handleExceptionEnd
end;

function Frame_GetVertScrollBar(AObj: TFrame): TControlScrollBar; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.VertScrollBar;
  handleExceptionEnd
end;

procedure Frame_SetVertScrollBar(AObj: TFrame; AValue: TControlScrollBar); extdecl;
begin
  handleExceptionBegin
  AObj.VertScrollBar := AValue;
  handleExceptionEnd
end;

function Frame_GetDockClientCount(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DockClientCount;
  handleExceptionEnd
end;

function Frame_GetMouseInClient(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.MouseInClient;
  handleExceptionEnd
end;

function Frame_GetVisibleDockClientCount(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.VisibleDockClientCount;
  handleExceptionEnd
end;

function Frame_GetBrush(AObj: TFrame): TBrush; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Brush;
  handleExceptionEnd
end;

function Frame_GetControlCount(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ControlCount;
  handleExceptionEnd
end;

function Frame_GetHandle(AObj: TFrame): HWND; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Handle;
  handleExceptionEnd
end;

function Frame_GetParentWindow(AObj: TFrame): HWND; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ParentWindow;
  handleExceptionEnd
end;

procedure Frame_SetParentWindow(AObj: TFrame; AValue: HWND); extdecl;
begin
  handleExceptionBegin
  AObj.ParentWindow := AValue;
  handleExceptionEnd
end;

function Frame_GetShowing(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Showing;
  handleExceptionEnd
end;

function Frame_GetUseDockManager(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.UseDockManager;
  handleExceptionEnd
end;

procedure Frame_SetUseDockManager(AObj: TFrame; AValue: LongBool); extdecl;
begin
  handleExceptionBegin
  AObj.UseDockManager := AValue;
  handleExceptionEnd
end;

function Frame_GetAction(AObj: TFrame): TBasicAction; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Action;
  handleExceptionEnd
end;

procedure Frame_SetAction(AObj: TFrame; AValue: TBasicAction); extdecl;
begin
  handleExceptionBegin
  AObj.Action := AValue;
  handleExceptionEnd
end;

procedure Frame_GetBoundsRect(AObj: TFrame; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BoundsRect;
  handleExceptionEnd
end;

procedure Frame_SetBoundsRect(AObj: TFrame; var AValue: TRect); extdecl;
begin
  handleExceptionBegin
  AObj.BoundsRect := AValue;
  handleExceptionEnd
end;

function Frame_GetClientHeight(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientHeight;
  handleExceptionEnd
end;

procedure Frame_SetClientHeight(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientHeight := AValue;
  handleExceptionEnd
end;

procedure Frame_GetClientOrigin(AObj: TFrame; var Result: TPoint); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientOrigin;
  handleExceptionEnd
end;

procedure Frame_GetClientRect(AObj: TFrame; var Result: TRect); extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientRect;
  handleExceptionEnd
end;

function Frame_GetClientWidth(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ClientWidth;
  handleExceptionEnd
end;

procedure Frame_SetClientWidth(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ClientWidth := AValue;
  handleExceptionEnd
end;

function Frame_GetControlState(AObj: TFrame): TControlState; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ControlState;
  handleExceptionEnd
end;

procedure Frame_SetControlState(AObj: TFrame; AValue: TControlState); extdecl;
begin
  handleExceptionBegin
  AObj.ControlState := AValue;
  handleExceptionEnd
end;

function Frame_GetControlStyle(AObj: TFrame): TControlStyle; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ControlStyle;
  handleExceptionEnd
end;

procedure Frame_SetControlStyle(AObj: TFrame; AValue: TControlStyle); extdecl;
begin
  handleExceptionBegin
  AObj.ControlStyle := AValue;
  handleExceptionEnd
end;

function Frame_GetFloating(AObj: TFrame): LongBool; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Floating;
  handleExceptionEnd
end;

function Frame_GetParent(AObj: TFrame): TWinControl; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Parent;
  handleExceptionEnd
end;

procedure Frame_SetParent(AObj: TFrame; AValue: TWinControl); extdecl;
begin
  handleExceptionBegin
  AObj.Parent := AValue;
  handleExceptionEnd
end;

function Frame_GetLeft(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Left;
  handleExceptionEnd
end;

procedure Frame_SetLeft(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Left := AValue;
  handleExceptionEnd
end;

function Frame_GetTop(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Top;
  handleExceptionEnd
end;

procedure Frame_SetTop(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Top := AValue;
  handleExceptionEnd
end;

function Frame_GetWidth(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Width;
  handleExceptionEnd
end;

procedure Frame_SetWidth(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Width := AValue;
  handleExceptionEnd
end;

function Frame_GetHeight(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Height;
  handleExceptionEnd
end;

procedure Frame_SetHeight(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.Height := AValue;
  handleExceptionEnd
end;

function Frame_GetCursor(AObj: TFrame): TCursor; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Cursor;
  handleExceptionEnd
end;

procedure Frame_SetCursor(AObj: TFrame; AValue: TCursor); extdecl;
begin
  handleExceptionBegin
  AObj.Cursor := AValue;
  handleExceptionEnd
end;

function Frame_GetHint(AObj: TFrame): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.Hint);
  handleExceptionEnd
end;

procedure Frame_SetHint(AObj: TFrame; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Hint := AValue;
  handleExceptionEnd
end;

function Frame_GetComponentCount(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ComponentCount;
  handleExceptionEnd
end;

function Frame_GetComponentIndex(AObj: TFrame): Integer; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ComponentIndex;
  handleExceptionEnd
end;

procedure Frame_SetComponentIndex(AObj: TFrame; AValue: Integer); extdecl;
begin
  handleExceptionBegin
  AObj.ComponentIndex := AValue;
  handleExceptionEnd
end;

function Frame_GetOwner(AObj: TFrame): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Owner;
  handleExceptionEnd
end;

function Frame_GetName(AObj: TFrame): PChar; extdecl;
begin
  handleExceptionBegin
  Result :=  PChar(AObj.Name);
  handleExceptionEnd
end;

procedure Frame_SetName(AObj: TFrame; AValue: PChar); extdecl;
begin
  handleExceptionBegin
  AObj.Name := AValue;
  handleExceptionEnd
end;

function Frame_GetTag(AObj: TFrame): NativeInt; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Tag;
  handleExceptionEnd
end;

procedure Frame_SetTag(AObj: TFrame; AValue: NativeInt); extdecl;
begin
  handleExceptionBegin
  AObj.Tag := AValue;
  handleExceptionEnd
end;

function Frame_GetAnchorSideLeft(AObj: TFrame): TAnchorSide; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AnchorSideLeft;
  handleExceptionEnd
end;

procedure Frame_SetAnchorSideLeft(AObj: TFrame; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideLeft := AValue;
  handleExceptionEnd
end;

function Frame_GetAnchorSideTop(AObj: TFrame): TAnchorSide; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AnchorSideTop;
  handleExceptionEnd
end;

procedure Frame_SetAnchorSideTop(AObj: TFrame; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideTop := AValue;
  handleExceptionEnd
end;

function Frame_GetAnchorSideRight(AObj: TFrame): TAnchorSide; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AnchorSideRight;
  handleExceptionEnd
end;

procedure Frame_SetAnchorSideRight(AObj: TFrame; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideRight := AValue;
  handleExceptionEnd
end;

function Frame_GetAnchorSideBottom(AObj: TFrame): TAnchorSide; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AnchorSideBottom;
  handleExceptionEnd
end;

procedure Frame_SetAnchorSideBottom(AObj: TFrame; AValue: TAnchorSide); extdecl;
begin
  handleExceptionBegin
  AObj.AnchorSideBottom := AValue;
  handleExceptionEnd
end;

function Frame_GetChildSizing(AObj: TFrame): TControlChildSizing; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.ChildSizing;
  handleExceptionEnd
end;

procedure Frame_SetChildSizing(AObj: TFrame; AValue: TControlChildSizing); extdecl;
begin
  handleExceptionBegin
  AObj.ChildSizing := AValue;
  handleExceptionEnd
end;

function Frame_GetBorderSpacing(AObj: TFrame): TControlBorderSpacing; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.BorderSpacing;
  handleExceptionEnd
end;

procedure Frame_SetBorderSpacing(AObj: TFrame; AValue: TControlBorderSpacing); extdecl;
begin
  handleExceptionBegin
  AObj.BorderSpacing := AValue;
  handleExceptionEnd
end;

function Frame_GetDockClients(AObj: TFrame; Index: Integer): TControl; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.DockClients[Index];
  handleExceptionEnd
end;

function Frame_GetControls(AObj: TFrame; Index: Integer): TControl; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Controls[Index];
  handleExceptionEnd
end;

function Frame_GetComponents(AObj: TFrame; AIndex: Integer): TComponent; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.Components[AIndex];
  handleExceptionEnd
end;

function Frame_GetAnchorSide(AObj: TFrame; AKind: TAnchorKind): TAnchorSide; extdecl;
begin
  handleExceptionBegin
  Result :=  AObj.AnchorSide[AKind];
  handleExceptionEnd
end;

function Frame_StaticClassType: TClass; extdecl;
begin
  Result := TFrame;
end;

exports
  Frame_Create,
  Frame_Free,
  Frame_ScrollInView,
  Frame_CanFocus,
  Frame_ContainsControl,
  Frame_ControlAtPos,
  Frame_DisableAlign,
  Frame_EnableAlign,
  Frame_FindChildControl,
  Frame_FlipChildren,
  Frame_Focused,
  Frame_HandleAllocated,
  Frame_InsertControl,
  Frame_Invalidate,
  Frame_RemoveControl,
  Frame_Realign,
  Frame_Repaint,
  Frame_ScaleBy,
  Frame_ScrollBy,
  Frame_SetBounds,
  Frame_SetFocus,
  Frame_Update,
  Frame_BringToFront,
  Frame_ClientToScreen,
  Frame_ClientToParent,
  Frame_Dragging,
  Frame_HasParent,
  Frame_Hide,
  Frame_Perform,
  Frame_Refresh,
  Frame_ScreenToClient,
  Frame_ParentToClient,
  Frame_SendToBack,
  Frame_Show,
  Frame_GetTextBuf,
  Frame_GetTextLen,
  Frame_SetTextBuf,
  Frame_FindComponent,
  Frame_GetNamePath,
  Frame_Assign,
  Frame_ClassType,
  Frame_ClassName,
  Frame_InstanceSize,
  Frame_InheritsFrom,
  Frame_Equals,
  Frame_GetHashCode,
  Frame_ToString,
  Frame_AnchorToNeighbour,
  Frame_AnchorParallel,
  Frame_AnchorHorizontalCenterTo,
  Frame_AnchorVerticalCenterTo,
  Frame_AnchorAsAlign,
  Frame_AnchorClient,
  Frame_GetAlign,
  Frame_SetAlign,
  Frame_GetAnchors,
  Frame_SetAnchors,
  Frame_GetAutoScroll,
  Frame_SetAutoScroll,
  Frame_GetAutoSize,
  Frame_SetAutoSize,
  Frame_GetBiDiMode,
  Frame_SetBiDiMode,
  Frame_GetConstraints,
  Frame_SetConstraints,
  Frame_GetDockSite,
  Frame_SetDockSite,
  Frame_GetDoubleBuffered,
  Frame_SetDoubleBuffered,
  Frame_GetDragCursor,
  Frame_SetDragCursor,
  Frame_GetDragKind,
  Frame_SetDragKind,
  Frame_GetDragMode,
  Frame_SetDragMode,
  Frame_GetEnabled,
  Frame_SetEnabled,
  Frame_GetColor,
  Frame_SetColor,
  Frame_GetFont,
  Frame_SetFont,
  Frame_GetParentColor,
  Frame_SetParentColor,
  Frame_GetParentDoubleBuffered,
  Frame_SetParentDoubleBuffered,
  Frame_GetParentFont,
  Frame_SetParentFont,
  Frame_GetParentShowHint,
  Frame_SetParentShowHint,
  Frame_GetPopupMenu,
  Frame_SetPopupMenu,
  Frame_GetShowHint,
  Frame_SetShowHint,
  Frame_GetTabOrder,
  Frame_SetTabOrder,
  Frame_GetTabStop,
  Frame_SetTabStop,
  Frame_GetVisible,
  Frame_SetVisible,
  Frame_SetOnAlignPosition,
  Frame_SetOnClick,
  Frame_SetOnContextPopup,
  Frame_SetOnDblClick,
  Frame_SetOnDockDrop,
  Frame_SetOnDragDrop,
  Frame_SetOnDragOver,
  Frame_SetOnEndDock,
  Frame_SetOnEndDrag,
  Frame_SetOnEnter,
  Frame_SetOnExit,
  Frame_SetOnGetSiteInfo,
  Frame_SetOnMouseDown,
  Frame_SetOnMouseEnter,
  Frame_SetOnMouseLeave,
  Frame_SetOnMouseMove,
  Frame_SetOnMouseUp,
  Frame_SetOnMouseWheel,
  Frame_SetOnMouseWheelDown,
  Frame_SetOnMouseWheelUp,
  Frame_SetOnResize,
  Frame_SetOnStartDock,
  Frame_SetOnUnDock,
  Frame_GetHorzScrollBar,
  Frame_SetHorzScrollBar,
  Frame_GetVertScrollBar,
  Frame_SetVertScrollBar,
  Frame_GetDockClientCount,
  Frame_GetMouseInClient,
  Frame_GetVisibleDockClientCount,
  Frame_GetBrush,
  Frame_GetControlCount,
  Frame_GetHandle,
  Frame_GetParentWindow,
  Frame_SetParentWindow,
  Frame_GetShowing,
  Frame_GetUseDockManager,
  Frame_SetUseDockManager,
  Frame_GetAction,
  Frame_SetAction,
  Frame_GetBoundsRect,
  Frame_SetBoundsRect,
  Frame_GetClientHeight,
  Frame_SetClientHeight,
  Frame_GetClientOrigin,
  Frame_GetClientRect,
  Frame_GetClientWidth,
  Frame_SetClientWidth,
  Frame_GetControlState,
  Frame_SetControlState,
  Frame_GetControlStyle,
  Frame_SetControlStyle,
  Frame_GetFloating,
  Frame_GetParent,
  Frame_SetParent,
  Frame_GetLeft,
  Frame_SetLeft,
  Frame_GetTop,
  Frame_SetTop,
  Frame_GetWidth,
  Frame_SetWidth,
  Frame_GetHeight,
  Frame_SetHeight,
  Frame_GetCursor,
  Frame_SetCursor,
  Frame_GetHint,
  Frame_SetHint,
  Frame_GetComponentCount,
  Frame_GetComponentIndex,
  Frame_SetComponentIndex,
  Frame_GetOwner,
  Frame_GetName,
  Frame_SetName,
  Frame_GetTag,
  Frame_SetTag,
  Frame_GetAnchorSideLeft,
  Frame_SetAnchorSideLeft,
  Frame_GetAnchorSideTop,
  Frame_SetAnchorSideTop,
  Frame_GetAnchorSideRight,
  Frame_SetAnchorSideRight,
  Frame_GetAnchorSideBottom,
  Frame_SetAnchorSideBottom,
  Frame_GetChildSizing,
  Frame_SetChildSizing,
  Frame_GetBorderSpacing,
  Frame_SetBorderSpacing,
  Frame_GetDockClients,
  Frame_GetControls,
  Frame_GetComponents,
  Frame_GetAnchorSide,
  Frame_StaticClassType;

