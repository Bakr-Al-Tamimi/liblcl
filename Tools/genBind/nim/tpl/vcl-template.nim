#[ 
   The code is automatically generated by the genBind tool. 
   Author: ying32
   https://github.com/ying32  
]#
##
##
import liblcl, types
##
##
##
type

{{/* 基类定义 */}}
{{range $el := .BaseObjects}}
##
  {{$el.ClassName}}*{{if isEmpty $el.BaseClassName}} {.inheritable.}{{end}} = ref object{{if not (isEmpty $el.BaseClassName)}} of {{$el.BaseClassName}}{{end}}
  {{if isEmpty $el.BaseClassName}}  FInstance: pointer{{end}}
{{end}}

{{/* 剩下的类定义 */}}
{{range $el := .Objects}}
{{if not (isBaseObj $el.ClassName)}}
##
  {{$el.ClassName}}* = ref object of {{$el.BaseClassName}}
{{end}}
{{end}}

{{/* 定义的一些函数 */}}
#---------------------------------------------------------------
##
proc ShowMessage*(msg: string) =
  DShowMessage(msg)
##
proc GetStringArrOf*(p: pointer, index: int): string =
  return $DGetStringArrOf(p, index)
##
proc CheckPtr*(obj: TObject): pointer =
  if obj != nil:
    return obj.FInstance
  else:
    return nil
##
proc getApplication(): TApplication =
  new(result)
  result.FInstance = Application_Instance()
##
##
proc LoadResFormFile*(fileName: string, root: TObject) =
  ResFormLoadFromFile(fileName, CheckPtr(root))
##
##

{{/* 开始生成方法 */}}
{{range $el := .Objects}}
##
#------------------------- {{$el.ClassName}} -------------------------
{{$className := $el.ClassName}}
##
{{$classN := rmObjectT $className}}
{{range $mm := $el.Methods}}
{{if eq $mm.RealName "Create"}}
proc New{{$classN}}*({{range $idx, $ps := $mm.Params}}{{if gt $idx 0}}, {{end}}{{$ps.Name}}: {{covType2 $ps.Type}}{{end}}): {{$className}} =
   new(result)
   result.FInstance = {{$mm.Name}}({{range $idx, $ps := $mm.Params}}{{if gt $idx 0}}, {{end}}{{if isObject $ps.Type}}CheckPtr({{$ps.Name}}){{else}}{{$ps.Name}}{{end}}{{end}})
##
{{else if eq $mm.RealName "Free"}}
method Free*(this: {{$className}}){{if isBaseMethod $el.ClassName $mm.RealName}} {.base.}{{end}} =
  if this != nil:
     {{$mm.Name}}(this.FInstance)
     this.{{if ne $className "TObject"}}TObject.{{end}}FInstance = nil
##
{{else if $mm.IsStatic}}
proc {{$className}}Class*(): TClass =
  return {{$mm.Name}}()
##
{{else}}
{{if not $mm.IsStatic}}
{{/* 累了，不想弄，直接写好的得了 */}}
{{if eq $mm.RealName "TextRect2"}}
method TextRect2*(this: TCanvas, Rect: var TRect, Text: string, AOutStr: var string, TextFormat: TTextFormat): int32 {.base.} =
  var outstr: cstring
  result = Canvas_TextRect2(this.FInstance, Rect, Text, outstr, TextFormat)
  AOutStr = $outstr
{{else}}
##
method {{propGetName $mm}}*(this: {{$className}}{{range $idx, $ps := $mm.Params}}{{if gt $idx 0}}, {{$ps.Name}}: {{if $ps.IsVar}}var {{end}}{{covType2 $ps.Type}}{{end}}{{end}}){{if not (isEmpty $mm.Return)}}: {{covType2 $mm.Return}}{{end}}{{if isBaseMethod $el.ClassName $mm.RealName}} {.base.}{{end}} =
  {{if not (isEmpty $mm.Return)}}
    {{if isObject $mm.Return}}
  new(result)
    {{end}}
  {{end}}
  {{if not (isEmpty $mm.Return)}}{{if isObject $mm.Return}}result.FInstance ={{else}}return{{end}} {{if eq $mm.Return "string"}}${{end}}{{end}}{{$mm.Name}}(this.FInstance{{range $idx, $ps := $mm.Params}}{{if gt $idx 0}}, {{if isObject $ps.Type}}CheckPtr({{$ps.Name}}){{else}}{{$ps.Name}}{{end}}{{end}}{{end}})
{{end}}
{{end}}
{{end}}
{{end}}
{{end}}
##
##
#------------ global vars ----------------------
##
var
   Application* = getApplication()
