/*
    The code is automatically generated by the genBind tool.
    Author: ying32
    https://github.com/ying32
*/
##
#![allow(non_snake_case)]
#![allow(improper_ctypes)]
#![allow(non_camel_case_types)]
#![allow(dead_code)]
#![allow(non_upper_case_globals)]
##
##
use std::os::raw::c_char;

##

{{/* 基础类型定义 */}}

{{range $tidex, $el := .BaseTypes}}
{{if isEmpty $el.FieldArch}}
  {{if eq $el.Kind "struct"}}

##
#[repr(C)]
pub struct {{$el.Name}} {
    {{range $field := $el.Fields}}
    {{covKeyword $field.Name}}: {{if $field.IsArr}}[{{end}}{{covType $field.Type}}{{if $field.IsArr}};{{$field.ArrLength}}]{{end}},
    {{end}}
}
##
  {{else if eq $el.Kind "set"}}
##
// set of {{$el.SetOf}}
pub type {{$el.Name}} = TSet;
##
  {{else}}
pub type {{$el.Name}} = {{covType $el.Type}};
  {{end}}
{{end}}
{{end}}
##


{{/* 类型，包含结构和枚举 */}}
{{range $el := .Types}}
  {{if eq $el.Kind "struct"}}
##
#[repr(C)]
pub struct {{$el.Name}} {
    {{range $field := $el.Fields}}
    {{covKeyword $field.Name}}: {{if $field.IsArr}}[{{end}}{{covType $field.Type}}{{if $field.IsArr}};{{$field.ArrLength}}]{{end}},
    {{end}}
}
  {{else if eq $el.Kind "enum"}}
##
#[repr(C)]
pub enum {{$el.Name}} {
    {{range $enum := $el.Enums}}
    {{$enum.Name}}{{if not (isEmpty $enum.Value)}} = {{$enum.Value}}{{end}},{{if not (isEmpty $enum.Comment)}} // {{html $enum.Comment}}{{end}}
    {{end}}
}
  {{else if eq $el.Kind "set"}}
##
// set of {{$el.SetOf}}
pub type {{$el.Name}} = TSet;
  {{else}}
##
pub type {{$el.Name}} = {{covType $el.Type}};
  {{end}}
{{end}}


{{/* 基础类型定义，只找arch的 */}}

{{range $tidex, $el := .BaseTypes}}
{{if not (isEmpty $el.FieldArch)}}
  {{if eq $el.Kind "struct"}}
##
##
{{if eq $el.FieldArch "i386"}}
#[cfg(not(target_arch = "x86"))]
{{else}}
#[cfg(not(target_arch = "x86_64"))]
{{end}}
#[repr(C)]
{{if ne $el.Name "TDWordFiller"}}pub {{end}}struct {{$el.Name}} {
    {{range $field := $el.Fields}}
      {{covKeyword $field.Name}}: {{if $field.IsArr}}[{{end}}{{covType $field.Type}}{{if $field.IsArr}};{{$field.ArrLength}}]{{end}},
    {{end}}
}
  {{end}}
{{end}}
{{end}}

##
#[cfg(target_os = "linux")]
pub type PGdkWindow = usize;
#[cfg(target_os = "linux")]
pub type TXId = usize;
#[cfg(target_os = "linux")]
pub type PGtkFixed = usize;
##
##
#[cfg(target_os = "macos")]
pub type MyNSWindow = usize;
##



{{/* 事件定义 */}}
##
{{range $el := .Events}}
  {{if isEmpty $el.ReDefine}}
##
// fn ({{range $idx, $ps := $el.Params}}{{if gt $idx 0}}, {{end}}{{if $ps.IsVar}}*mut {{end}}{{$ps.Name}}: {{if isObject $ps.Type}}pointer{{else}}{{covType $ps.Type}}{{end}}{{end}})
pub type {{$el.Name}} = fn({{range $idx, $ps := $el.Params}}{{if gt $idx 0}}, {{end}}{{if $ps.IsVar}}*mut {{end}}{{if isObject $ps.Type}}usize{{else}}{{covType $ps.Type}}{{end}}{{end}});
  {{else}}
##
pub type {{$el.Name}} = {{$el.ReDefine}};
  {{end}}
{{end}}


{{/* 常量定义 */}}
##
{{define "getColorType"}}{{if hasPrefix .Name "cl"}}: TColor{{end}}{{end}}
{{define "getKeyType"}}{{if hasPrefix .Name "vk"}}: Char{{end}}{{end}}
{{define "getCursorType"}}{{end}}
{{define "getOtherType"}}{{if or (or (hasPrefix .Name "id") (hasPrefix .Name "mr")) (hasPrefix .Name "CF_")}}: u8{{end}}{{end}}

{{range $el := .Consts}}
  {{if not (isEmpty $el.Name)}}
  {{$isCur := hasPrefix $el.Name "cr"}}
const {{$el.Name}}{{template "getColorType" $el}}{{template "getKeyType" $el}}{{template "getOtherType" $el}}{{if $isCur}}: TCursor{{end}} = {{if $isCur}}{{getConstVal2 $el.Value}}{{else}}{{$el.Value}}{{end}}{{if not (isEmpty $el.Value2)}} + {{$el.Value2}}{{end}};{{if not (isEmpty $el.Comment)}} // {{html $el.Comment}}{{end}}
  {{else}}
##
// {{$el.Comment}}
  {{end}}
{{end}}
