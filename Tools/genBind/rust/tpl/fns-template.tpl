/*
   The code is automatically generated by the genBind tool.
   Author: ying32
   https://github.com/ying32
*/
##
#![allow(non_snake_case)]
#![allow(unused_unsafe)]
##
use lclapi;
use std::borrow::Cow;
use std::ffi::{CStr, CString};
use types::*;
use vcl::{TControl, TWinControl, IObject, IComponent, IStrings, IStream};
##
pub fn GetFPStringArrayMember{{html "<'a>"}}(ptr: usize, index: isize) -> Cow{{html "<'a, str>"}} {
    return to_RustString!(lclapi::DGetStringArrOf(ptr, index));
}
##
pub fn GetLibResourceItem(index: i32) -> TResItem {
    let mut result = TResItem::Empty();
    unsafe {
        lclapi::DGetLibResourceItem(index, &mut result);
    }
    return result;
}
##
pub fn StringToGUID(guidStr: &str) -> TGUID {
    let mut result = TGUID::Empty();
    unsafe { lclapi::DStringToGUID(to_CString!(guidStr), &mut result) }
    return result;
}
##
pub fn CreateGUID() -> TGUID {
    let mut result = TGUID::Empty();
    unsafe { lclapi::DCreateGUID(&mut result) }
    return result;
}
##
#[cfg(target_os = "linux")]
pub fn GdkWindow_GetXId(AW: PGdkWindow) -> TXId {
    let mut result: TXID = 0;
    unsafe { lclapi::GdkWindow_GetXId(AW, &mut result) }
    return result;
}
##
/*

// 几个待实现的函数
proc ShowMessageFmt*(formatstr: string, a: varargs[string, `$`]) =
  ShowMessage(strutils.format(formatstr, a))
##
proc SelectDirectory*(Directory: var string, Options: TSelectDirOpts, HelpCtx: int32): bool =
  var ps1: cstring = Directory
  result = lclapi.DSelectDirectory1(ps1, Options, HelpCtx)
  if result:
    Directory = $ps1
##
proc SelectDirectory*(Caption: string, Root: string, AShowHidden: bool, Directory: var string): bool =
  var ps4: cstring = Directory
  result = lclapi.DSelectDirectory2(Caption, Root, AShowHidden, ps4)
  if result:
    Directory = $ps4
##
proc InputQuery*(ACaption: string, APrompt: string, Value: string, AOut: var string): bool =
  var ps4: cstring = AOut
  result = lclapi.DInputQuery(ACaption, APrompt, Value, ps4)
  if result:
    AOut = $ps4

*/
##

{{define "getFunc"}}
    {{$el := .}}
    {{$buff := newBuffer}}

    {{if eq $el.Platform "windows"}}
        {{$buff.Writeln "#[cfg(target_os = \"windows\")]"}}
    {{else if eq $el.Platform "linux,macos"}}
        {{$buff.Writeln "#[cfg(not(target_os = \"windows\"))]"}}
    {{else if eq $el.Platform "macos"}}
        {{$buff.Writeln "#[cfg(target_os = \"macos\")]"}}
    {{else if eq $el.Platform "linux"}}
        {{$buff.Writeln "#[cfg(target_os = \"linux\")]"}}
    {{end}}


    {{$retIsStr := eq $el.Return "string"}}

    {{$buff.Write "pub fn " (delDChar $el.Name)}}
    {{if $retIsStr}}
        {{$buff.Write "<'a>"}}
    {{end}}
    {{$buff.Write "("}}
    {{range $idx, $ps := .Params}}
        {{if gt $idx 0}}
            {{$buff.Write ", "}}
        {{end}}
        {{$buff.Write (fLowCase $ps.Name) ": "}}
        {{if $ps.IsVar}}
            {{if ne $ps.Flag "nonPtr"}}
                {{$buff.Write "*mut "}}
            {{else}}
                {{$buff.Write "&"}}
            {{end}}
        {{end}}
        {{if isObject $ps.Type}}
            {{$buff.Write "&"}}
            {{if isIntf $ps.Type}}
                {{$buff.Write "dyn "}}
            {{end}}
            {{getIntfName $ps.Type|$buff.Write}}
        {{else}}
            {{covType2 $ps.Type|$buff.Write}}
        {{end}}
    {{end}}

    {{$buff.Write ")"}}
    {{if not (isEmpty $el.Return)}}
        {{$buff.Write " -> "}}
        {{if $retIsStr}}
           {{$buff.Write "Cow<'a, str>"}}
        {{else}}
           {{$buff.Write (covType2 $el.Return)}}
        {{end}}
    {{end}}
    {{$buff.Writeln " {"}}

    {{/*这里生成不需要var的变量*/}}
    {{range $ips, $ps := $el.Params}}
        {{if and ($ps.IsVar) (eq $ps.Flag "nonPtr")}}
            {{$buff.Writeln "    let mut ps" $ips " = " (covType $ps.Type) "::From(" (fLowCase $ps.Name) ");"}}
        {{end}}
    {{end}}

    {{$buff.Write "    unsafe { "}}
    {{if not (isEmpty $el.Return)}}
        {{$buff.Write "return "}}
    {{end}}

    {{if isObject $el.Return}}
        {{$buff.Write $el.Return "::As("}}
    {{end}}


    {{if $retIsStr}}
        {{$buff.Write "to_RustString!("}}
    {{end}}
    {{$buff.Write "lclapi::" $el.Name "("}}

    {{range $idx, $ps := .Params}}
        {{if gt $idx 0}}
            {{$buff.Write ", "}}
        {{end}}
        {{$lIsObj := isObject $ps.Type}}
        {{if ne $ps.Flag "nonPtr"}}
            {{$isStr := eq $ps.Type "string"}}
            {{if $isStr}}
                {{$buff.Write "to_CString!("}}
            {{end}}
            {{$buff.Write (fLowCase $ps.Name)}}
            {{if $isStr}}
                {{$buff.Write ")"}}
            {{end}}
        {{else}}
            {{$buff.Write "&mut ps" $idx}}
        {{end}}
        {{if $lIsObj}}
            {{$buff.Write ".Instance()"}}
        {{end}}
    {{end}}

    {{$buff.Write ")"}}
    {{if $retIsStr}}
        {{$buff.Write ")"}}
    {{end}}

    {{if isObject $el.Return}}
        {{$buff.Write ")"}}
    {{end}}

    {{$buff.Writeln "}"}}

    {{$buff.Writeln "}"}}

{{$buff.ToStr}}
{{end}}

{{/*执行模板*/}}
{{range $el := .Functions}}
    {{if not (inStrArray $el.Name "DGetStringArrOf" "DSynchronize" "DMove" "DStrLen" "SetEventCallback" "SetThreadSyncCallback" "SetMessageCallback" "DSelectDirectory2" "DSelectDirectory1" "DInputQuery" "GdkWindow_GetXId" "DCreateGUID" "DStringToGUID" "DStringToGUID" "DGetLibResourceItem" "SetExceptionHandlerCallback")}}
        {{if not (contains $el.Name "_Instance")}}
      ##
            {{template "getFunc" $el}}
        {{end}}
    {{end}}
{{end}}

##
##
##
// 集合加法，val...中存储为位的索引，下标为0
#[inline]
pub fn Include(s: TSet, val: u8) -> TSet {
    {{html "return s | (1 << val);"}}
}

// 集合减法，val...中存储为位的索引，下标为0
#[inline]
pub fn Exclude(s: TSet, val: u8) -> TSet {
    {{html "return s & (!(1 << val));"}}
}

// 集合类型的判断，val表示位数，下标为0
#[inline]
pub fn InSet(s: u32, val: u8) -> bool {
    {{html "return (s & (1 << val)) != 0;"}}
}