/*
    The code is automatically generated by the genBind tool.
    Author: ying32
    https://github.com/ying32
*/
##
##
#![allow(non_snake_case)]
#![allow(improper_ctypes)]
// use std::ffi::{CStr, CString};
use std::os::raw::c_char;
##
use crate::callbacks::*;
use crate::types::*;
##
// MSVC 编译器，静态加载
#[link(name = "liblcl")]
extern "system" {
##
{{define "getPub"}}{{if not (inStrArray . "SetEventCallback" "SetMessageCallback" "SetThreadSyncCallback")}}pub {{end}}{{end}}
##
{{range $el := .Functions}}
{{if eq $el.Platform "windows"}}  #[cfg(target_os = "windows")]{{end}}
{{if eq $el.Platform "linux,macos"}}  #[cfg(not(target_os = "windows"))]{{end}}
{{if eq $el.Platform "macos"}}  #[cfg(target_os = "macos")]{{end}}
{{if eq $el.Platform "linux"}}  #[cfg(target_os = "linux")]{{end}}
  {{template "getPub" $el.Name}}fn {{$el.Name}}({{range $idx, $ps := $el.Params}}{{if gt $idx 0}}, {{end}}{{$ps.Name}}: {{if not (isObject $ps.Type)}}{{if $ps.IsVar}}*mut {{end}}{{covType $ps.Type}}{{else}}usize{{end}}{{end}}){{if not (isEmpty $el.Return)}} -> {{if not (isObject $el.Return)}}{{covType $el.Return}}{{else}}usize{{end}}{{end}};
{{end}}
##
##
{{range $el := .Objects}}
##
  // ----------------- {{$el.ClassName}} ----------------------
{{range $fn := $el.Methods}}
  pub fn {{$fn.Name}}({{range $idx, $ps := $fn.Params}}{{if gt $idx 0}}, {{end}}{{$ps.Name}}: {{if not (isObject $ps.Type)}}{{if $ps.IsVar}}*mut {{end}}{{covType $ps.Type}}{{else}}usize{{end}}{{end}}){{if not (isEmpty $fn.Return)}} -> {{if not (isObject $fn.Return)}}{{covType $fn.Return}}{{else}}usize{{end}}{{end}};
{{end}}
{{end}}
##
}
##
pub fn init_lib_lcl() {
    unsafe {
        // 基本事件回调
        SetEventCallback(do_event_callback as usize);
        SetMessageCallback(do_message_callback as usize);
        SetThreadSyncCallback(do_thread_sync_callback as usize);
    }
}
