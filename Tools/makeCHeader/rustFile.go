//----------------------------------------
//
// Copyright © ying32. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package main

import (
	"strings"
)

var (
	rustBaseTypeMap = map[string]string{
		"LongBool":             "bool",
		"PChar":                "*const c_char",
		"Pointer":              "usize",
		"Integer":              "u32",
		"Cardinal":             "u32",
		"Double":               "f64",
		"Single":               "f32",
		"TThreadID":            "usize",
		"NativeInt":            "size",
		"NativeUInt":           "usize",
		"Boolean":              "bool",
		"Longint":              "i32",
		"UInt64":               "u64",
		"IInt64":               "i64",
		"TBasicAction":         "usize",
		"TPersistent":          "usize",
		"Byte":                 "u8",
		"TBorderWidth":         "i32",
		"TCustomImageList":     "usize",
		"TUnixDateTime":        "u32",
		"TCustomListView":      "usize",
		"TCustomTreeView":      "usize",
		"TImageIndex":          "i32",
		"SmallInt":             "i16",
		"TCustomForm":          "usize",
		"TWidth":               "i32",
		"uint32":               "u32",
		"int32":                "i32",
		"Int64":                "i64",
		"LongWord":             "u32",
		"Word":                 "u16",
		"PPointerList":         "usize",
		"string":               "*const c_char",
		"TCustomHeaderControl": "usize",
		"TCollectionItemClass": "usize",
		"PPoint":               "usize",
		"TOverlay":             "u8",
		"TGoForm":              "usize",
		"TLMessage":            "usize",
		"IObject":              "usize",
		"IWinControl":          "usize",
		"IComponent":           "usize",
		"IControl":             "usize",
		"bool":                 "bool",
		"uint16":               "u16",
		"TForm":                "usize",

		//"TResItem":             "",
	}
)

type RustFile struct {
	*File
}

func NewRustFile(fileName string) *RustFile {
	f := new(RustFile)
	f.File = NewFile(fileName)
	return f
}

func (c *RustFile) WriteHeader() {
	c.W(`
/* 
   The code is automatically generated by the makeCHeader tool. 
   Author: ying32
   https://github.com/ying32  
*/

#![allow(non_snake_case)]
#![allow(improper_ctypes)]

use std::os::raw::c_char;

use crate::callbacks::*;
use crate::enums::*;
use crate::types::*;

#[link(name = "liblcl")]
extern "system" {
`)
}

func (c *RustFile) WriteFooter() {
	c.W(`
    fn SetEventCallback(callback: extern "system" fn(f: usize, args: usize, arg_count: i32) -> usize) -> usize;
    fn SetMessageCallback(callback: extern "system" fn(f: usize, msg: usize) -> usize) -> usize;
    fn SetThreadSyncCallback(callback: extern "system" fn() -> usize) -> usize;
}

pub fn init_lib_lcl() {
    unsafe {
        // 基本事件回调
        SetEventCallback(do_event_callback);
        SetMessageCallback(do_message_callback);
        SetThreadSyncCallback(do_thread_sync_callback);
    }
}

`)
}

var (
	rustIsPlatform bool
)

func MakeRustImport(name, returnType string, params []Param, isClass bool) {
	isEq := func(s string) bool {
		return s == name
	}
	if isEq("SetEventCallback") || isEq("SetMessageCallback") || isEq("SetThreadSyncCallback") {
		return
	}

	if name == "DSendMessage" || name == "DCreateURLShortCut" {
		rustIsPlatform = true
	}
	if rustIsPlatform {
		if isEq("DCreateURLShortCut") || isEq("DCreateShortCut") {
			rustFile.W("    #[cfg(target_os = \"windows\")]\n")
		} else {
			rustFile.W("    #[cfg(not(target_os = \"windows\"))]\n")
		}
	} else {
		if strings.HasPrefix(name, "GtkWidget_") || strings.HasPrefix(name, "GdkWindow_") {
			rustFile.W("    #[cfg(target_os = \"linux\")]\n")
		} else if strings.HasPrefix(name, "NSWindow_") {
			rustFile.W("    #[cfg(target_os = \"macos\")]\n")
		}
	}
	rustFile.W("    pub fn ")
	rustFile.W(name)
	// 参数
	rustFile.W("(")
	for i, p := range params {
		if i > 0 {
			rustFile.W(", ")
		}
		rustFile.W(p.Name)
		rustFile.W(": ")
		rustFile.W(rustBaseTypeConvert(p.Type))
	}
	rustFile.W(")")
	// 判断返回值
	if returnType != "" {
		rustFile.W(" -> ")
		rustFile.W(rustBaseTypeConvert(returnType))
	}
	rustFile.W(";")
	rustFile.WLn()

	//rustFile.W("(")
	//for i, ps := range params {
	//	if i > 0 {
	//		rustFile.W(", ")
	//	}
	//	if ps.Type == "PChar" && !ps.IsVar {
	//		//f.W("const ")
	//		rustFile.W("CChar ")
	//	}
	//	rustFile.W(rustTypeConvert(ps.Type))
	//	if ps.IsVar {
	//		rustFile.W("*")
	//	}
	//	rustFile.W(" ")
	//	rustFile.W(ps.Name)
	//}
	//
	//getParamNames := func() string {
	//	if len(params) > 0 {
	//		ns := ""
	//		for i, s := range params {
	//			if i >= 0 {
	//				ns += ", "
	//			}
	//			//ns += fmt.Sprintf("COV_PARAM(%s)", s.Name)
	//			ns += s.Name
	//		}
	//		for i := 0; i < 12-len(params); i++ {
	//			ns += " ,0"
	//		}
	//		return ns
	//	}
	//	return " ,0, 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0"
	//}
	//
	//rustFile.W(") {\n")
	//rustFile.W(fmt.Sprintf("    GET_FUNC_ADDR(%s)\n", name))
	//rustFile.W("    ")
	//if returnType != "" {
	//	cFile.W(fmt.Sprintf("return (%s)", rustTypeConvert(returnType)))
	//}
	//rustFile.W(fmt.Sprintf("MySyscall(p%s, %d%s);", name, len(params), getParamNames()))
	//rustFile.WLn()
	//rustFile.W("}\n")
	//rustFile.WLn()

	// 添加结束
	if name == "DWindowFromPoint" || name == "DCreateShortCut" {
		rustIsPlatform = false
	}
}

// #[cfg(windows)]
// #[cfg(unix)]

func rustBaseTypeConvert(src string) string {
	if _, ok := objsMap[src]; ok {
		return "usize"
	} else {
		if src == "TMouse" || src == "TApplication" || src == "TScreen" || src == "TClipboard" || src == "TPrinter" || src == "TControl" || src == "TWinControl" ||
			src == "TComponent" || src == "TObject" {
			return "usize"
		}
	}
	if val, ok := rustBaseTypeMap[src]; ok {
		return val
	}
	return src
}
